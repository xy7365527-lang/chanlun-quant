name: 高级代码审查与分析

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  ai-code-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 设置 Python 环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: 智能代码审查
        uses: coderabbitai/openai-pr-reviewer@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          debug: false
          review_simple_changes: false
          review_comment_lgtm: false
          openai_light_model: gpt-3.5-turbo
          openai_heavy_model: gpt-4
          openai_timeout_ms: 900000
          language: zh-CN
          path_filters: |
            **/*.py
            **/*.js
            **/*.ts
            !tests/**
            !**/__pycache__/**
          system_message: |
            你是一位资深的量化交易和Python开发专家。
            请重点关注以下方面：
            1. 缠论算法逻辑的正确性
            2. 交易策略的风险控制
            3. 代码性能和优化机会
            4. 潜在的安全问题
            5. Python最佳实践
            请用中文简体提供审查意见。

      - name: 代码质量检查
        run: |
          pip install pylint flake8 black
          echo "## 代码质量报告" >> $GITHUB_STEP_SUMMARY
          
          # 运行 Black 检查格式
          if black --check chanlun_quant/ 2>&1 | tee black_report.txt; then
            echo "✅ Black 格式检查通过" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Black 发现格式问题" >> $GITHUB_STEP_SUMMARY
          fi
          
          # 运行 Flake8
          if flake8 chanlun_quant/ --max-line-length=120 --exclude=__pycache__ 2>&1 | tee flake8_report.txt; then
            echo "✅ Flake8 检查通过" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Flake8 发现问题" >> $GITHUB_STEP_SUMMARY
          fi
        continue-on-error: true

  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 安全漏洞扫描
        uses: pyupio/safety@2.3.5
        with:
          api-key: ${{ secrets.SAFETY_API_KEY }}
        continue-on-error: true
        
      - name: 依赖检查
        run: |
          pip install pip-audit
          pip-audit -r requirements.txt || true

